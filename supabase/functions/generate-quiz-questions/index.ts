
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const geminiApiKey = Deno.env.get('GEMINI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface QuizRequest {
  theme: string;
  difficulty: string;
  questionCount: number;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üöÄ Starting quiz generation with Gemini...');
    
    if (!geminiApiKey) {
      console.error('‚ùå Gemini API key not found');
      throw new Error('Cl√© API Gemini non configur√©e');
    }

    const { theme, difficulty, questionCount }: QuizRequest = await req.json();
    console.log('üìù Request params:', { theme, difficulty, questionCount });

    // Descriptions d√©taill√©es pour chaque th√®me
    const themeDescriptions = {
      'vie-jesus': {
        title: 'la vie de J√©sus',
        context: 'naissance √† Bethl√©em, bapt√™me par Jean-Baptiste, minist√®re public, miracles (gu√©rison des aveugles, multiplication des pains, r√©surrection de Lazare), enseignements (paraboles, Sermon sur la montagne), Passion (arrestation, crucifixion), r√©surrection et ascension'
      },
      'commandements': {
        title: 'les dix commandements',
        context: 'les dix commandements donn√©s √† Mo√Øse sur le mont Sina√Ø, les enseignements moraux de J√©sus, les b√©atitudes, l\'amour de Dieu et du prochain, les vertus chr√©tiennes'
      },
      'creation': {
        title: 'la cr√©ation du monde',
        context: 'les sept jours de la cr√©ation selon la Gen√®se, Adam et √àve au jardin d\'√âden, la chute, Ca√Øn et Abel, No√© et le d√©luge, la tour de Babel'
      },
      'prophetes': {
        title: 'les proph√®tes de l\'Ancien Testament',
        context: 'Mo√Øse, √âlie, √âlis√©e, √âsa√Øe, J√©r√©mie, √âz√©chiel, Daniel, les douze petits proph√®tes, leurs messages de repentance et d\'espoir, leurs proph√©ties messianiques'
      },
      'nouveau-testament': {
        title: 'le Nouveau Testament',
        context: 'les Actes des Ap√¥tres, la vie de l\'√âglise primitive, les √©p√Ætres de Paul, Pierre, Jean, Jacques, l\'Apocalypse, la diffusion du christianisme'
      }
    };

    // Instructions sp√©cifiques pour chaque niveau de difficult√©
    const difficultyInstructions = {
      'facile': {
        level: 'd√©butant',
        instructions: 'Pose des questions g√©n√©rales et bien connues. Utilise des noms, lieux et √©v√©nements c√©l√®bres. √âvite les d√©tails complexes. Les r√©ponses doivent √™tre √©videntes pour quelqu\'un qui conna√Æt les bases de la Bible.'
      },
      'moyen': {
        level: 'interm√©diaire',
        instructions: 'Pose des questions sur des d√©tails sp√©cifiques et des connexions entre les √©v√©nements. Inclus des r√©f√©rences pr√©cises aux versets. Demande des connaissances plus approfondies sans √™tre trop technique.'
      },
      'difficile': {
        level: 'expert',
        instructions: 'Pose des questions th√©ologiques complexes, des analyses textuelles approfondies, des connexions entre diff√©rents livres bibliques. Inclus des nuances doctrinales et des interpr√©tations avanc√©es.'
      }
    };

    const selectedTheme = themeDescriptions[theme];
    const selectedDifficulty = difficultyInstructions[difficulty];

    // G√©n√©rer un seed unique et vraiment al√©atoire
    const timestamp = Date.now();
    const randomValue = Math.random() * 10000;
    const uniqueSeed = Math.floor(timestamp + randomValue);

    console.log('üé≤ Generated unique seed:', uniqueSeed);

    const prompt = `Tu es un expert biblique reconnu qui cr√©e des quiz √©ducatifs de haute qualit√©. Tu ma√Ætrises parfaitement les √âcritures et tu es capable de poser des questions pertinentes et pr√©cises.

CONTEXTE TH√âMATIQUE : ${selectedTheme.context}

NIVEAU DE DIFFICULT√â : ${selectedDifficulty.instructions}

SEED DE VARIATION : ${uniqueSeed} (utilise ce nombre pour cr√©er des questions compl√®tement uniques et originales)

T√ÇCHE : Cr√©e exactement ${questionCount} questions de quiz COMPL√àTEMENT NOUVELLES ET ORIGINALES sur "${selectedTheme.title}" au niveau ${selectedDifficulty.level}.

R√àGLES ABSOLUES :
1. R√©ponds UNIQUEMENT avec un tableau JSON valide
2. AUCUN texte avant ou apr√®s le JSON
3. AUCUN formatage markdown (pas de \`\`\`json)
4. Exactement ${questionCount} questions uniques
5. Chaque question doit √™tre totalement diff√©rente et in√©dite
6. Utilise le seed ${uniqueSeed} pour garantir des questions jamais vues
7. INTERDICTION ABSOLUE de r√©p√©ter des questions d√©j√† pos√©es

FORMAT REQUIS (tableau JSON uniquement) :
[
  {
    "id": "q1",
    "question": "Question pr√©cise en fran√ßais",
    "options": ["Option A", "Option B", "Option C", "Option D"],
    "correctAnswer": 0,
    "verse": "R√©f√©rence biblique pr√©cise avec citation courte"
  }
]

EXIGENCES CRITIQUES :
- ${questionCount} questions exactement
- Chaque question TOTALEMENT unique et originale (jamais pos√©e avant)
- correctAnswer : index 0, 1, 2 ou 3 SEULEMENT
- Options plausibles mais une seule correcte
- R√©f√©rences bibliques pr√©cises et vraies
- Adaptation parfaite au niveau ${difficulty}
- ZERO r√©p√©tition ou similarit√© avec d'autres questions
- Questions cr√©atives et engageantes

G√âN√àRE MAINTENANT ${questionCount} QUESTIONS BIBLIQUES UNIQUES :`;

    console.log('ü§ñ Calling Gemini API with unique seed:', uniqueSeed);

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.9,
          topK: 50,
          topP: 0.95,
          maxOutputTokens: 8000,
        }
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Gemini API error:', response.status, errorText);
      
      if (response.status === 429) {
        throw new Error('Quota Gemini d√©pass√©. Veuillez v√©rifier votre plan de facturation.');
      } else if (response.status === 401 || response.status === 403) {
        throw new Error('Cl√© API Gemini invalide ou non autoris√©e.');
      } else {
        throw new Error(`Erreur Gemini API (${response.status}): ${errorText}`);
      }
    }

    const data = await response.json();
    console.log('üì° Full Gemini response:', JSON.stringify(data, null, 2));

    const generatedContent = data.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedContent) {
      console.error('‚ùå No content generated by Gemini');
      throw new Error('Gemini n\'a g√©n√©r√© aucun contenu');
    }

    console.log('üìÑ Raw Gemini content:', generatedContent);

    // Nettoyage du contenu Gemini
    let cleanedContent = generatedContent.trim();
    
    // Supprimer les balises markdown si pr√©sentes
    cleanedContent = cleanedContent.replace(/```json\s*/gi, '');
    cleanedContent = cleanedContent.replace(/\s*```/g, '');
    
    // Trouver le tableau JSON
    const jsonStart = cleanedContent.indexOf('[');
    const jsonEnd = cleanedContent.lastIndexOf(']') + 1;
    
    if (jsonStart === -1 || jsonEnd === 0) {
      console.error('‚ùå No JSON array found in Gemini response');
      throw new Error('Format de r√©ponse Gemini invalide - pas de tableau JSON trouv√©');
    }
    
    const jsonContent = cleanedContent.substring(jsonStart, jsonEnd);
    console.log('üßπ Extracted JSON:', jsonContent);

    let questions;
    try {
      questions = JSON.parse(jsonContent);
    } catch (parseError) {
      console.error('‚ùå JSON parsing failed:', parseError);
      console.log('üìÑ Failed content:', jsonContent);
      throw new Error('Impossible de parser la r√©ponse JSON de Gemini');
    }

    // Validation stricte
    if (!Array.isArray(questions)) {
      throw new Error('La r√©ponse Gemini n\'est pas un tableau de questions');
    }

    if (questions.length === 0) {
      throw new Error('Gemini n\'a g√©n√©r√© aucune question');
    }

    // Validation et nettoyage de chaque question
    const validatedQuestions = questions.slice(0, questionCount).map((q, index) => {
      if (!q || typeof q !== 'object') {
        throw new Error(`Question ${index + 1} invalide`);
      }

      const questionId = q.id || `q${index + 1}`;
      const question = q.question || `Question ${index + 1} non d√©finie`;
      
      if (!Array.isArray(q.options) || q.options.length !== 4) {
        throw new Error(`Question ${index + 1}: 4 options requises`);
      }
      
      const correctAnswer = typeof q.correctAnswer === 'number' && 
        q.correctAnswer >= 0 && q.correctAnswer <= 3 
        ? q.correctAnswer 
        : 0;
      
      const verse = q.verse || 'R√©f√©rence biblique non sp√©cifi√©e';

      return {
        id: questionId,
        question: question.trim(),
        options: q.options.map(opt => opt.toString().trim()),
        correctAnswer,
        verse: verse.trim()
      };
    });

    console.log(`‚úÖ Successfully generated ${validatedQuestions.length} UNIQUE questions with Gemini (seed: ${uniqueSeed})`);
    console.log('üìã Generated questions preview:', validatedQuestions.map(q => q.question.substring(0, 50) + '...'));

    return new Response(JSON.stringify({ questions: validatedQuestions }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Error in generate-quiz-questions function:', error);
    
    return new Response(JSON.stringify({ 
      error: error.message,
      details: '√âchec de la g√©n√©ration du quiz avec Gemini',
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
