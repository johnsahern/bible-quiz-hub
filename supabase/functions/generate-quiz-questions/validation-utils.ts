import { QuizQuestion } from './biblical-contexts.ts';

export function validateQuestions(questions: any[], expectedCount: number): any[] {
  console.log('üîç Validation des questions re√ßues...');
  
  if (!Array.isArray(questions)) {
    console.error('‚ùå Questions re√ßues ne sont pas un tableau');
    throw new Error('Format de questions invalide');
  }

  const validQuestions = questions.filter(q => {
    // Validation de base
    const hasBasicStructure = q.question && 
                             Array.isArray(q.options) && 
                             q.options.length === 4 &&
                             typeof q.correctAnswer === 'number' &&
                             q.correctAnswer >= 0 && 
                             q.correctAnswer < 4;
    
    if (!hasBasicStructure) {
      console.warn('‚ùå Question rejet√©e - structure invalide:', q);
      return false;
    }

    // Validation de la longueur de la question
    if (q.question.length < 10) {
      console.warn('‚ùå Question rejet√©e - trop courte:', q.question);
      return false;
    }

    // Validation des options
    if (q.options.some((opt: string) => !opt || opt.length < 2)) {
      console.warn('‚ùå Question rejet√©e - options invalides:', q.options);
      return false;
    }

    // Validation du verset (optionnel mais recommand√©)
    if (q.verse && q.verse.length < 3) {
      console.warn('‚ö†Ô∏è Verset suspect pour la question:', q.question);
    }

    return true;
  });

  console.log(`‚úÖ ${validQuestions.length}/${questions.length} questions valid√©es`);

  if (validQuestions.length === 0) {
    throw new Error('Aucune question valide g√©n√©r√©e');
  }

  // Retourner exactement le nombre demand√© (ou moins si pas assez)
  const finalQuestions = validQuestions.slice(0, expectedCount);
  
  // Ajouter des IDs s√©quentiels
  return finalQuestions.map((q, index) => ({
    ...q,
    id: q.id || `q${index + 1}`
  }));
}

export function generateUniqueSeed(theme: string, difficulty: string, questionCount: number): number {
  const timestamp = Date.now();
  const themeHash = theme.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
  const difficultyHash = difficulty.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
  
  // Cr√©er un seed vraiment unique bas√© sur plusieurs facteurs
  const uniqueSeed = timestamp + themeHash * 1000 + difficultyHash * 100 + questionCount * 10;
  
  return uniqueSeed;
}

export function cleanJsonResponse(response: string): string {
  console.log('üßπ Nettoyage de la r√©ponse JSON...');
  
  let cleaned = response.trim();
  
  // Supprimer les balises markdown si pr√©sentes
  cleaned = cleaned.replace(/```json\s*/g, '');
  cleaned = cleaned.replace(/```\s*/g, '');
  
  // Supprimer tout texte avant le premier [
  const firstBracket = cleaned.indexOf('[');
  if (firstBracket !== -1) {
    cleaned = cleaned.substring(firstBracket);
  }
  
  // Supprimer tout texte apr√®s le dernier ]
  const lastBracket = cleaned.lastIndexOf(']');
  if (lastBracket !== -1) {
    cleaned = cleaned.substring(0, lastBracket + 1);
  }
  
  // Nettoyer les caract√®res de contr√¥le et espaces superflus
  cleaned = cleaned.replace(/[\r\n\t]/g, ' ').replace(/\s+/g, ' ');
  
  console.log('‚úÖ JSON nettoy√© avec succ√®s');
  return cleaned;
}

// Fonction pour valider la pertinence th√©matique (validation suppl√©mentaire)
export function validateThematicRelevance(questions: any[], selectedTheme: string): any[] {
  console.log(`üéØ Validation de la pertinence th√©matique pour le th√®me: ${selectedTheme}`);
  
  // Mots-cl√©s th√©matiques pour une validation basique c√¥t√© serveur
  const thematicKeywords: { [key: string]: string[] } = {
    'vie-jesus': ['J√©sus', 'Christ', 'Seigneur', 'Nazareth', 'Bethl√©em', 'Galil√©e'],
    'miracles-jesus': ['miracle', 'gu√©rison', 'multiplication', 'r√©surrection', 'aveugle', 'paralytique'],
    'david': ['David', 'roi', 'Goliath', 'Sa√ºl', 'Bethl√©em', 'berger'],
    'creation': ['cr√©ation', 'Gen√®se', 'Adam', '√àve', 'jardin', 'Eden'],
    'moise': ['Mo√Øse', '√âgypte', 'Pharaon', 'Exode', 'Sinai', 'tables'],
    'paul-apotre': ['Paul', 'Saul', 'Damas', 'Tarse', '√©p√Ætres', 'voyage'],
    // Ajouter d'autres th√®mes selon les besoins...
  };
  
  const keywords = thematicKeywords[selectedTheme] || [];
  
  if (keywords.length === 0) {
    console.log('‚ÑπÔ∏è Pas de mots-cl√©s sp√©cifiques d√©finis pour ce th√®me, validation g√©n√©rale uniquement');
    return questions;
  }
  
  const relevantQuestions = questions.filter(q => {
    const questionText = (q.question + ' ' + q.options.join(' ')).toLowerCase();
    const hasRelevantKeyword = keywords.some(keyword => 
      questionText.includes(keyword.toLowerCase())
    );
    
    if (!hasRelevantKeyword) {
      console.warn(`‚ö†Ô∏è Question potentiellement hors-sujet d√©tect√©e: ${q.question.substring(0, 50)}...`);
    }
    
    return hasRelevantKeyword;
  });
  
  console.log(`‚úÖ ${relevantQuestions.length}/${questions.length} questions consid√©r√©es comme th√©matiquement pertinentes`);
  
  // Si trop de questions sont filtr√©es, on garde les originales avec un avertissement
  if (relevantQuestions.length < questions.length * 0.5) {
    console.warn('‚ö†Ô∏è Trop de questions filtr√©es, conservation des questions originales');
    return questions;
  }
  
  return relevantQuestions;
}
