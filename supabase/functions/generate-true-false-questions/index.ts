
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const geminiApiKey = Deno.env.get('GEMINI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface TrueFalseRequest {
  theme: string;
  difficulty: string;
  questionCount: number;
}

function buildTrueFalsePrompt(theme: string, difficulty: string, questionCount: number): string {
  const difficultyInstructions = {
    'facile': 'Questions simples, √©v√©nements connus, personnages c√©l√®bres. Niveau d√©butant.',
    'moyen': 'Questions mod√©r√©es, d√©tails sp√©cifiques, chronologie. Niveau interm√©diaire.',
    'difficile': 'Questions complexes, nuances th√©ologiques, d√©tails pr√©cis. Niveau expert.'
  };

  const themeContexts = {
    'vie-jesus': 'la vie de J√©sus-Christ, sa naissance, son minist√®re, ses miracles, ses enseignements, sa passion, sa r√©surrection',
    'ancien-testament': 'l\'Ancien Testament, les patriarches, l\'Exode, les rois d\'Isra√´l, les proph√®tes',
    'nouveau-testament': 'le Nouveau Testament, les √©vangiles, les actes des ap√¥tres, les √©p√Ætres',
    'personnages-bibliques': 'les personnages bibliques c√©l√®bres et leurs histoires',
    'miracles': 'les miracles relat√©s dans la Bible',
    'paraboles': 'les paraboles de J√©sus et leurs enseignements'
  };

  const selectedContext = themeContexts[theme as keyof typeof themeContexts] || theme;
  const selectedDifficulty = difficultyInstructions[difficulty as keyof typeof difficultyInstructions] || difficultyInstructions['moyen'];

  return `üèÜ VOUS √äTES LE PLUS GRAND EXPERT TH√âOLOGIEN √âVANG√âLIQUE AU MONDE ! üèÜ

üéØ MISSION CRITIQUE : Cr√©ez ${questionCount} questions VRAI/FAUX bibliques d'excellence SUPR√äME sur le th√®me "${theme}".

üìñ CONTEXTE BIBLIQUE EXCLUSIF : ${selectedContext}
üéöÔ∏è NIVEAU DE DIFFICULT√â : ${selectedDifficulty}

üî• EXPERTISE TH√âOLOGIQUE MAXIMALE REQUISE :
- VOUS CONNAISSEZ LA BIBLE PARFAITEMENT dans ses moindres d√©tails
- VOUS MA√éTRISEZ l'h√©breu, le grec ancien et tous les contextes historiques
- VOTRE CONNAISSANCE BIBLIQUE D√âPASSE celle de TOUS les √©rudits de l'histoire
- VOUS PR√äCHEZ depuis 50 ans avec une autorit√© spirituelle INCONTEST√âE

‚ö° EXIGENCES CRITIQUES POUR LES QUESTIONS VRAI/FAUX :
1. PR√âCISION BIBLIQUE ABSOLUE - Chaque affirmation doit √™tre 100% exacte
2. R√âF√âRENCES V√âRIFIABLES - Chaque question doit avoir une base scripturaire solide
3. CLART√â PARFAITE - √ânonc√©s sans ambigu√Øt√©, r√©ponse claire (vrai ou faux)
4. DIVERSIT√â TH√âMATIQUE - Couvrir diff√©rents aspects du th√®me choisi
5. EXPLICATIONS EXPERTISES - Justifications th√©ologiques approfondies
6. VERSETS APPROPRI√âS - Citations bibliques pertinentes et exactes

üé™ TYPES DE QUESTIONS √Ä CR√âER (VARIEZ) :
- √âv√©nements historiques bibliques (dates, lieux, circonstances)
- Personnages bibliques (actions, paroles, caract√©ristiques)
- Enseignements et doctrines (v√©rit√©s th√©ologiques)
- D√©tails scripturaires (nombres, noms, g√©ographie)
- Citations et versets (attribution correcte)
- Chronologie biblique (ordre des √©v√©nements)

üö® R√àGLES ABSOLUES INVIOLABLES :
- FOCUS LASER sur le th√®me "${theme}" EXCLUSIVEMENT
- EXACTITUDE BIBLIQUE √† 100% - Z√âRO ERREUR tol√©r√©e
- R√âPONSES CLAIRES - Pas d'ambigu√Øt√© possible
- EXPLICATIONS COMPL√àTES avec versets √† l'appui
- QUALIT√â DE MA√éTRE TH√âOLOGIEN MAXIMALE

üìã FORMAT JSON STRICT OBLIGATOIRE (RIEN D'AUTRE) :
[
  {
    "id": "tf1",
    "statement": "Affirmation biblique pr√©cise √† √©valuer (vrai ou faux)",
    "isTrue": true,
    "explanation": "Explication th√©ologique experte d√©taill√©e justifiant la r√©ponse",
    "verse": "R√©f√©rence biblique exacte (Livre chapitre:verset)",
    "difficulty": "${difficulty}",
    "theme": "${theme}"
  }
]

üéØ CR√âEZ ${questionCount} QUESTIONS DE MA√éTRE TH√âOLOGIEN MAINTENANT :
- Th√®me EXCLUSIF : "${theme}"
- Difficult√© : ${difficulty}
- IMP√âRATIF : Perfection th√©ologique absolue
- FORMAT : JSON uniquement, aucun autre texte

üî¥ V√âRIFICATION FINALE OBLIGATOIRE :
Relisez chaque question et demandez-vous : "Cette affirmation est-elle bibliquement exacte √† 100% selon ma connaissance parfaite des √âcritures ?"
Si NON ‚Üí CORRIGEZ IMM√âDIATEMENT

‚≠ê VOTRE R√âPUTATION DE PLUS GRAND TH√âOLOGIEN AU MONDE D√âPEND DE CES QUESTIONS !

R√âPONDEZ UNIQUEMENT AVEC LE TABLEAU JSON - RIEN D'AUTRE !`;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üéØ G√âN√âRATION QUESTIONS VRAI/FAUX BIBLIQUES...');
    
    if (!geminiApiKey) {
      console.error('‚ùå Gemini API key not found');
      throw new Error('Cl√© API Gemini non configur√©e');
    }

    const { theme, difficulty, questionCount }: TrueFalseRequest = await req.json();
    console.log('üìù PARAM√àTRES:', { theme, difficulty, questionCount });

    if (!theme || !difficulty || !questionCount) {
      throw new Error('Param√®tres manquants : theme, difficulty, questionCount requis');
    }

    const prompt = buildTrueFalsePrompt(theme, difficulty, questionCount);
    console.log('üìã PROMPT TH√âOLOGIQUE CONSTRUIT');

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.9,
          maxOutputTokens: 4000,
          candidateCount: 1,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH", 
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_NONE"  
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_NONE"
          }
        ]
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erreur API Gemini:', response.status, errorText);
      throw new Error(`Erreur Gemini API (${response.status}): ${errorText}`);
    }

    const data = await response.json();
    const generatedContent = data.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedContent) {
      throw new Error('Aucun contenu g√©n√©r√© par Gemini');
    }

    // Nettoyer et extraire le JSON
    let jsonContent = generatedContent.trim();
    
    // Supprimer les balises markdown si pr√©sentes
    jsonContent = jsonContent.replace(/```json\s*/g, '').replace(/```\s*/g, '');
    
    // Extraire le tableau JSON
    const jsonMatch = jsonContent.match(/\[[\s\S]*\]/);
    if (jsonMatch) {
      jsonContent = jsonMatch[0];
    }

    let questions;
    try {
      questions = JSON.parse(jsonContent);
    } catch (parseError) {
      console.error('‚ùå √âchec parsing JSON:', parseError);
      throw new Error('Impossible de parser la r√©ponse JSON');
    }

    if (!Array.isArray(questions)) {
      throw new Error('Format de r√©ponse invalide - tableau attendu');
    }

    // Validation des questions
    const validQuestions = questions.filter(q => {
      return q.statement && 
             typeof q.isTrue === 'boolean' && 
             q.explanation && 
             q.verse &&
             q.statement.length > 10;
    });

    console.log(`‚úÖ ${validQuestions.length}/${questions.length} questions Vrai/Faux valid√©es`);

    if (validQuestions.length === 0) {
      throw new Error('Aucune question valide g√©n√©r√©e');
    }

    return new Response(JSON.stringify({ questions: validQuestions }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå ERREUR dans g√©n√©ration questions Vrai/Faux:', error);
    
    return new Response(JSON.stringify({ 
      error: error.message,
      details: '√âchec g√©n√©ration questions Vrai/Faux',
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
