
import { useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';
import { RoomStatus } from '@/types/multiplayer';

export const useRoomOperations = (user: any) => {
  const createRoom = useCallback(async (theme: string, difficulty: string, questionCount: number = 10) => {
    if (!user) {
      console.log('‚ùå No user found');
      return null;
    }

    try {
      console.log('üöÄ SIMPLE ROOM CREATION START');
      console.log('User:', user.id);
      
      // G√©n√©rer le code de salle directement
      const { data: codeData, error: codeError } = await supabase.rpc('generate_room_code');
      
      if (codeError) {
        console.error('‚ùå Code generation failed:', codeError);
        throw new Error(`Code generation failed: ${codeError.message}`);
      }
      
      console.log('‚úÖ Room code:', codeData);

      // Cr√©er la salle directement
      const roomData = {
        room_code: codeData,
        host_id: user.id,
        theme,
        difficulty,
        question_count: questionCount,
        status: 'waiting' as const,
        max_players: 8
      };
      
      console.log('üìù Creating room with data:', roomData);
      
      const { data: createdRoom, error: roomError } = await supabase
        .from('quiz_rooms')
        .insert(roomData)
        .select()
        .single();

      if (roomError) {
        console.error('‚ùå Room creation failed:', roomError);
        throw new Error(`Room creation failed: ${roomError.message}`);
      }

      console.log('‚úÖ Room created:', createdRoom.id);

      // Ajouter l'h√¥te comme joueur avec une approche tr√®s simple
      const { data: profile } = await supabase
        .from('profiles')
        .select('username')
        .eq('id', user.id)
        .single();

      const username = profile?.username || `User-${user.id.slice(0, 6)}`;
      
      const playerData = {
        room_id: createdRoom.id,
        user_id: user.id,
        username: username,
        is_ready: true,
        score: 0,
        correct_answers: 0
      };

      console.log('üë§ Adding host as player:', playerData);

      const { error: joinError } = await supabase
        .from('quiz_room_players')
        .insert(playerData);

      if (joinError) {
        console.error('‚ùå Host join failed:', joinError);
        // Ne pas faire √©chouer - la salle existe
        toast({
          title: "Salle cr√©√©e",
          description: `Code: ${codeData} (rejoignez manuellement si besoin)`,
        });
      } else {
        console.log('‚úÖ Host joined successfully');
        toast({
          title: "Salle cr√©√©e !",
          description: `Code de la salle: ${codeData}`,
        });
      }

      console.log('üéâ ROOM CREATION COMPLETED');
      
      return {
        ...createdRoom,
        status: createdRoom.status as RoomStatus,
        questions: Array.isArray(createdRoom.questions) ? createdRoom.questions : []
      };

    } catch (err: any) {
      console.error('üí• CREATION ERROR:', err);
      
      toast({
        title: "Erreur de cr√©ation",
        description: err.message || "Impossible de cr√©er la salle",
        variant: "destructive",
      });
      return null;
    }
  }, [user]);

  const joinRoom = useCallback(async (roomCode: string) => {
    if (!user) {
      console.log('‚ùå No user for join operation');
      return false;
    }

    try {
      console.log('üö™ SIMPLE JOIN PROCESS START');
      console.log('Room code:', roomCode, 'User ID:', user.id);
      
      // Chercher la salle
      const { data: roomData, error: roomError } = await supabase
        .from('quiz_rooms')
        .select('*')
        .eq('room_code', roomCode.toUpperCase())
        .eq('status', 'waiting')
        .single();

      if (roomError || !roomData) {
        console.error('‚ùå Room not found:', roomError);
        toast({
          title: "Salle introuvable",
          description: "Code invalide ou salle d√©j√† commenc√©e",
          variant: "destructive",
        });
        return false;
      }

      console.log('‚úÖ Room found:', roomData.id);

      // V√©rifier le nombre de joueurs
      const { count } = await supabase
        .from('quiz_room_players')
        .select('*', { count: 'exact' })
        .eq('room_id', roomData.id);

      if (count && count >= roomData.max_players) {
        toast({
          title: "Salle pleine",
          description: "Nombre maximum de joueurs atteint",
          variant: "destructive",
        });
        return false;
      }

      // R√©cup√©rer le profil
      const { data: profile } = await supabase
        .from('profiles')
        .select('username')
        .eq('id', user.id)
        .single();

      const username = profile?.username || `Player-${user.id.slice(0, 6)}`;

      // Rejoindre la salle
      const { error: joinError } = await supabase
        .from('quiz_room_players')
        .insert({
          room_id: roomData.id,
          user_id: user.id,
          username: username,
          is_ready: false
        });

      if (joinError) {
        console.error('‚ùå Join failed:', joinError);
        if (joinError.code === '23505') {
          toast({
            title: "D√©j√† dans la salle",
            description: "Vous √™tes d√©j√† connect√© √† cette salle",
            variant: "destructive",
          });
        } else {
          throw joinError;
        }
        return false;
      }

      console.log('‚úÖ Successfully joined room');
      toast({
        title: "Salle rejointe !",
        description: `Bienvenue dans la salle ${roomCode}`,
      });

      return true;
    } catch (err: any) {
      console.error('üí• Error joining room:', err);
      toast({
        title: "Erreur de connexion",
        description: err.message || "Impossible de rejoindre la salle",
        variant: "destructive",
      });
      return false;
    }
  }, [user]);

  return { createRoom, joinRoom };
};
